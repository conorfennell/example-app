/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.2
 * apibuilder 0.14.75 app.apibuilder.io/paintbatch-com/example-app/0.2/http4s_0_20
 */
package com.paintbatch.mock {

  class Client[F[_]: cats.Applicative] extends com.paintbatch.interfaces.Client[F] {

    val baseUrl: org.http4s.Uri = org.http4s.Uri.unsafeFromString("http://mock.localhost")

    override def healthchecks: com.paintbatch.Healthchecks[F] = new MockHealthchecks[F]

  }

  class MockHealthchecks[F[_]: cats.Applicative] extends com.paintbatch.Healthchecks[F] {

    /**
     * GET health of service
     */
    def getHealthcheck(
      requestHeaders: Seq[(String, String)] = Nil
    ): F[com.paintbatch.models.Healthcheck] = cats.Applicative[F].pure {
      com.paintbatch.mock.Factories.makeHealthcheck()
    }

  }

  object Factories {

    def randomString(length: Int = 24): String = {
      _root_.scala.util.Random.alphanumeric.take(length).mkString
    }

    def makeStatus(): com.paintbatch.models.Status = com.paintbatch.models.Status.Ok

    def makeHealthcheck(): com.paintbatch.models.Healthcheck = com.paintbatch.models.Healthcheck(
      status = com.paintbatch.mock.Factories.makeStatus()
    )

  }

}